// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // A-instruction || C-instruction && destination == A
    And(a=instruction[15], b=instruction[5], out=cinsdesa);
    Not(in=instruction[15], out=notains);
    Or(a=notains, b=cinsdesa, out=loadaregister);

    // C-instruction && destination == D
    And(a=instruction[15], b=instruction[4], out=loaddregister);

    Mux16(a=instruction, b=aluoutput, sel=instruction[15], out=muxa);
    ARegister(in=muxa, load=loadaregister, out=aregister); // load if A-instruction || C-instruction && destination == A

    DRegister(in=aluoutput, load=loaddregister, out=dregister); // load if C-instruction && destination == D

    Mux16(a=aregister, b=inM, sel=instruction[12], out=muxb);

    ALU(x=dregister, y=muxb, zx=instruction[11], nx=instruction[10], zy=instruction[9],
        ny=instruction[8], f=instruction[7], no=instruction[6], out=aluoutput, zr=zerofalg, ng=negflag);

    // setup outputs addressM, outM, writeM
    Or16(a=aregister, b=false, out[0..14]=addressM);
    Or16(a=aluoutput, b=false, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // setup output pc
    // jump conditions
    And(a=zerofalg, b=instruction[1], out=jeq);
    And(a=negflag, b=instruction[2], out=jlt);
    Or(a=jeq, b=jlt, out=jeqorjlt);

    Or(a=zerofalg, b=negflag, out=zeroorneg);
    Not(in=zeroorneg, out=postiveflag);
    And(a=postiveflag, b=instruction[0], out=jgt);

    Or(a=jeqorjlt, b=jgt, out=jeqorjltorjgt); // JEQ || JLT || JGT
    And(a=jeqorjltorjgt, b=instruction[15], out=jumpflag); // jump if C-instruction and (JEQ || JLT || JGT)
    Not(in=jumpflag, out=incflag);

    PC(in=aregister, load=jumpflag, inc=incflag, reset=reset, out[0..14]=pc);
}